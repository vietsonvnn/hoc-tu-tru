import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import type { NguHanhType } from '../types';
import { getNguHanhColor } from '../utils/colors';
import { nguHanhData } from '../data/nguHanh';
import { thienCanData } from '../data/thienCan';
import { diaChiData } from '../data/diaChi';

type CardType = 'nguhanh' | 'thiencan' | 'diachi';

interface Card {
  type: CardType;
  name: string;
  nguHanh: NguHanhType;
  data?: any;
}

// H√†m ph√¢n t√≠ch quan h·ªá gi·ªØa 2 Ng≈© H√†nh
const analyzeNguHanhRelation = (nh1: NguHanhType, nh2: NguHanhType) => {
  const relations: Record<NguHanhType, Record<string, NguHanhType[]>> = {
    Kim: {
      sinh: ['Th·ªßy'],
      kh·∫Øc: ['M·ªôc'],
      b·ªãSinh: ['Th·ªï'],
      b·ªãKh·∫Øc: ['H·ªèa'],
      ƒë·ªìng: ['Kim']
    },
    M·ªôc: {
      sinh: ['H·ªèa'],
      kh·∫Øc: ['Th·ªï'],
      b·ªãSinh: ['Th·ªßy'],
      b·ªãKh·∫Øc: ['Kim'],
      ƒë·ªìng: ['M·ªôc']
    },
    Th·ªßy: {
      sinh: ['M·ªôc'],
      kh·∫Øc: ['H·ªèa'],
      b·ªãSinh: ['Kim'],
      b·ªãKh·∫Øc: ['Th·ªï'],
      ƒë·ªìng: ['Th·ªßy']
    },
    H·ªèa: {
      sinh: ['Th·ªï'],
      kh·∫Øc: ['Kim'],
      b·ªãSinh: ['M·ªôc'],
      b·ªãKh·∫Øc: ['Th·ªßy'],
      ƒë·ªìng: ['H·ªèa']
    },
    Th·ªï: {
      sinh: ['Kim'],
      kh·∫Øc: ['Th·ªßy'],
      b·ªãSinh: ['H·ªèa'],
      b·ªãKh·∫Øc: ['M·ªôc'],
      ƒë·ªìng: ['Th·ªï']
    }
  };

  if (relations[nh1].sinh.includes(nh2)) {
    return { type: 'sinh', label: 'T∆∞∆°ng Sinh', icon: '‚Üí', color: 'text-green-600', desc: `${nh1} sinh ${nh2}`, detail: 'H·ªó tr·ª£, nu√¥i d∆∞·ª°ng, t·∫°o ƒëi·ªÅu ki·ªán ph√°t tri·ªÉn' };
  }
  if (relations[nh1].kh·∫Øc.includes(nh2)) {
    return { type: 'kh·∫Øc', label: 'T∆∞∆°ng Kh·∫Øc', icon: '‚öî', color: 'text-red-600', desc: `${nh1} kh·∫Øc ${nh2}`, detail: 'Ki·ªÉm so√°t, ch·∫ø ng·ª±, √°p ch·∫ø' };
  }
  if (relations[nh1].b·ªãSinh.includes(nh2)) {
    return { type: 'b·ªãsinh', label: 'ƒê∆∞·ª£c Sinh', icon: '‚Üê', color: 'text-blue-600', desc: `${nh1} ƒë∆∞·ª£c ${nh2} sinh`, detail: 'Nh·∫≠n h·ªó tr·ª£, ƒë∆∞·ª£c nu√¥i d∆∞·ª°ng' };
  }
  if (relations[nh1].b·ªãKh·∫Øc.includes(nh2)) {
    return { type: 'b·ªãkh·∫Øc', label: 'B·ªã Kh·∫Øc', icon: '‚ö°', color: 'text-orange-600', desc: `${nh1} b·ªã ${nh2} kh·∫Øc`, detail: 'B·ªã ki·ªÉm so√°t, b·ªã ch·∫ø ng·ª±' };
  }
  if (relations[nh1].ƒë·ªìng.includes(nh2)) {
    return { type: 'ƒë·ªìng', label: 'ƒê·ªìng H√†nh', icon: '=', color: 'text-purple-600', desc: `${nh1} ƒë·ªìng v·ªõi ${nh2}`, detail: 'C√πng lo·∫°i, h·ªó tr·ª£ l·∫´n nhau' };
  }

  return { type: 'none', label: 'Kh√¥ng c√≥', icon: '?', color: 'text-gray-600', desc: 'Kh√¥ng c√≥ quan h·ªá r√µ r√†ng', detail: '' };
};

// H√†m ph√¢n t√≠ch quan h·ªá Thi√™n Can
const analyzeThienCanRelation = (can1: string, can2: string) => {
  // Mapping Thi√™n Can -> Ng≈© H√†nh
  const canToNguHanh: Record<string, NguHanhType> = {
    'Gi√°p': 'M·ªôc', '·∫§t': 'M·ªôc',
    'B√≠nh': 'H·ªèa', 'ƒêinh': 'H·ªèa',
    'M·∫≠u': 'Th·ªï', 'K·ª∑': 'Th·ªï',
    'Canh': 'Kim', 'T√¢n': 'Kim',
    'Nh√¢m': 'Th·ªßy', 'Qu√Ω': 'Th·ªßy'
  };

  // H·ª£p (5 c·∫∑p Thi√™n Can H·ª£p)
  const hops = [
    { pair: ['Gi√°p', 'K·ª∑'], hoa: 'Th·ªï', desc: 'Gi√°p K·ª∑ h·ª£p h√≥a Th·ªï - Trung h√≤a, v·ªØng ch·∫Øc' },
    { pair: ['·∫§t', 'Canh'], hoa: 'Kim', desc: '·∫§t Canh h·ª£p h√≥a Kim - C∆∞∆°ng nhu t∆∞∆°ng t·∫ø' },
    { pair: ['B√≠nh', 'T√¢n'], hoa: 'Th·ªßy', desc: 'B√≠nh T√¢n h·ª£p h√≥a Th·ªßy - √Çm d∆∞∆°ng ƒëi·ªÅu h√≤a' },
    { pair: ['ƒêinh', 'Nh√¢m'], hoa: 'M·ªôc', desc: 'ƒêinh Nh√¢m h·ª£p h√≥a M·ªôc - VƒÉn v√µ song to√†n' },
    { pair: ['M·∫≠u', 'Qu√Ω'], hoa: 'H·ªèa', desc: 'M·∫≠u Qu√Ω h·ª£p h√≥a H·ªèa - Th·ªßy h·ªèa k√Ω t·∫ø' }
  ];

  for (const hop of hops) {
    if ((hop.pair[0] === can1 && hop.pair[1] === can2) || (hop.pair[0] === can2 && hop.pair[1] === can1)) {
      return {
        type: 'h·ª£p',
        label: 'Thi√™n Can H·ª£p',
        icon: 'ü§ù',
        color: 'text-green-600',
        desc: `${can1} h·ª£p ${can2} h√≥a ${hop.hoa}`,
        detail: hop.desc
      };
    }
  }

  // Kh·∫Øc (th√¥ng qua quan h·ªá Ng≈© H√†nh)
  const nh1 = canToNguHanh[can1];
  const nh2 = canToNguHanh[can2];

  if (nh1 && nh2) {
    const nhRelation = analyzeNguHanhRelation(nh1, nh2);
    if (nhRelation.type === 'kh·∫Øc') {
      return {
        type: 'kh·∫Øc',
        label: 'Thi√™n Can Kh·∫Øc',
        icon: '‚öî',
        color: 'text-red-600',
        desc: `${can1} (${nh1}) kh·∫Øc ${can2} (${nh2})`,
        detail: `${nh1} kh·∫Øc ${nh2} - T∆∞∆°ng kh·∫Øc th√¥ng qua Ng≈© H√†nh`
      };
    }
    if (nhRelation.type === 'sinh') {
      return {
        type: 'sinh',
        label: 'Thi√™n Can Sinh',
        icon: '‚Üí',
        color: 'text-blue-600',
        desc: `${can1} (${nh1}) sinh ${can2} (${nh2})`,
        detail: `${nh1} sinh ${nh2} - T∆∞∆°ng sinh th√¥ng qua Ng≈© H√†nh`
      };
    }
    if (nhRelation.type === 'ƒë·ªìng' && can1 !== can2) {
      return {
        type: 'ƒë·ªìng h√†nh',
        label: 'ƒê·ªìng Ng≈© H√†nh',
        icon: '=',
        color: 'text-purple-600',
        desc: `${can1} v√† ${can2} c√πng ${nh1}`,
        detail: 'C√πng Ng≈© H√†nh, h·ªó tr·ª£ l·∫´n nhau'
      };
    }
  }

  return { type: 'b√¨nh th∆∞·ªùng', label: 'B√¨nh th∆∞·ªùng', icon: '‚Üî', color: 'text-gray-600', desc: 'Kh√¥ng c√≥ quan h·ªá ƒë·∫∑c bi·ªát', detail: '' };
};

// H√†m ph√¢n t√≠ch quan h·ªá ƒê·ªãa Chi
const analyzeDiaChiRelation = (chi1: string, chi2: string) => {
  const allResults = [];

  // L·ª•c H·ª£p (H·ª£p 2 chi)
  const lucHops = [
    { chi: ['T√Ω', 'S·ª≠u'], hoa: 'Th·ªï', nghia: 'T√Ω S·ª≠u h·ª£p Th·ªï - ·ªîn ƒë·ªãnh, v·ªØng ch·∫Øc' },
    { chi: ['D·∫ßn', 'H·ª£i'], hoa: 'M·ªôc', nghia: 'D·∫ßn H·ª£i h·ª£p M·ªôc - Ph√°t tri·ªÉn, sinh tr∆∞·ªüng' },
    { chi: ['M√£o', 'Tu·∫•t'], hoa: 'H·ªèa', nghia: 'M√£o Tu·∫•t h·ª£p H·ªèa - Nhi·ªát huy·∫øt, s√°ng t·∫°o' },
    { chi: ['Th√¨n', 'D·∫≠u'], hoa: 'Kim', nghia: 'Th√¨n D·∫≠u h·ª£p Kim - Quy·∫øt ƒëo√°n, s·∫Øc b√©n' },
    { chi: ['T·ªã', 'Th√¢n'], hoa: 'Th·ªßy', nghia: 'T·ªã Th√¢n h·ª£p Th·ªßy - Th√¥ng minh, linh ho·∫°t' },
    { chi: ['Ng·ªç', 'M√πi'], hoa: 'Th·ªßy/H·ªèa', nghia: 'Ng·ªç M√πi h·ª£p - √Çm d∆∞∆°ng h√≤a h·ª£p' }
  ];

  for (const hop of lucHops) {
    if ((hop.chi[0] === chi1 && hop.chi[1] === chi2) || (hop.chi[0] === chi2 && hop.chi[1] === chi1)) {
      allResults.push({
        type: 'l·ª•c h·ª£p',
        label: 'L·ª•c H·ª£p (ƒê·ªãa Chi H·ª£p)',
        icon: 'ü§ù',
        color: 'text-green-600',
        desc: `${chi1} h·ª£p ${chi2} h√≥a ${hop.hoa}`,
        detail: hop.nghia
      });
    }
  }

  // L·ª•c Xung
  const lucXungs = [
    { chi: ['T√Ω', 'Ng·ªç'], nghia: 'B·∫Øc - Nam xung, Th·ªßy - H·ªèa ƒë·ªëi l·∫≠p' },
    { chi: ['S·ª≠u', 'M√πi'], nghia: 'ƒê√¥ng B·∫Øc - T√¢y Nam xung, Th·ªï - Th·ªï va ch·∫°m' },
    { chi: ['D·∫ßn', 'Th√¢n'], nghia: 'ƒê√¥ng B·∫Øc - T√¢y Nam xung, M·ªôc - Kim kh·∫Øc' },
    { chi: ['M√£o', 'D·∫≠u'], nghia: 'ƒê√¥ng - T√¢y xung, M·ªôc - Kim ƒë·ªëi ƒë·∫ßu' },
    { chi: ['Th√¨n', 'Tu·∫•t'], nghia: 'ƒê√¥ng Nam - T√¢y B·∫Øc xung, Th·ªï - Th·ªï va ch·∫°m' },
    { chi: ['T·ªã', 'H·ª£i'], nghia: 'Nam - B·∫Øc xung, H·ªèa - Th·ªßy ƒë·ªëi ngh·ªãch' }
  ];

  for (const xung of lucXungs) {
    if ((xung.chi[0] === chi1 && xung.chi[1] === chi2) || (xung.chi[0] === chi2 && xung.chi[1] === chi1)) {
      allResults.push({
        type: 'l·ª•c xung',
        label: 'L·ª•c Xung (ƒê·ªãa Chi Xung)',
        icon: '‚öîÔ∏è',
        color: 'text-red-600',
        desc: `${chi1} xung ${chi2}`,
        detail: `Xung ƒë·ªôt m·∫°nh - ${xung.nghia}`
      });
    }
  }

  // Tam H·ª£p (c·∫ßn 3 chi, ·ªü ƒë√¢y ch·ªâ note 2 chi c√≥ kh·∫£ nƒÉng h·ª£p)
  const tamHops = [
    { chi: ['Th√¢n', 'T√Ω', 'Th√¨n'], hoa: 'Th·ªßy', note: 'Th√¢n T√Ω Th√¨n tam h·ª£p Th·ªßy c·ª•c' },
    { chi: ['H·ª£i', 'M√£o', 'M√πi'], hoa: 'M·ªôc', note: 'H·ª£i M√£o M√πi tam h·ª£p M·ªôc c·ª•c' },
    { chi: ['D·∫ßn', 'Ng·ªç', 'Tu·∫•t'], hoa: 'H·ªèa', note: 'D·∫ßn Ng·ªç Tu·∫•t tam h·ª£p H·ªèa c·ª•c' },
    { chi: ['T·ªã', 'D·∫≠u', 'S·ª≠u'], hoa: 'Kim', note: 'T·ªã D·∫≠u S·ª≠u tam h·ª£p Kim c·ª•c' }
  ];

  for (const tamHop of tamHops) {
    if (tamHop.chi.includes(chi1) && tamHop.chi.includes(chi2)) {
      const missing = tamHop.chi.find(c => c !== chi1 && c !== chi2);
      allResults.push({
        type: 'b√°n h·ª£p',
        label: `B√°n H·ª£p (Thi·∫øu ${missing})`,
        icon: 'üîó',
        color: 'text-blue-600',
        desc: `${chi1} v√† ${chi2} c√≥ th·ªÉ tam h·ª£p ${tamHop.hoa} c·ª•c`,
        detail: `${tamHop.note}. C·∫ßn th√™m ${missing} ƒë·ªÉ ho√†n thi·ªán tam h·ª£p.`
      });
    }
  }

  // L·ª•c H·∫°i
  const lucHais = [
    { chi: ['T√Ω', 'M√πi'], nghia: 'T√Ω M√πi h·∫°i - NgƒÉn c·∫£n ph√°t tri·ªÉn' },
    { chi: ['S·ª≠u', 'Ng·ªç'], nghia: 'S·ª≠u Ng·ªç h·∫°i - C·∫£n tr·ªü ti·∫øn b·ªô' },
    { chi: ['D·∫ßn', 'T·ªã'], nghia: 'D·∫ßn T·ªã h·∫°i - Ph√° ho·∫°i h√≤a h·ª£p' },
    { chi: ['M√£o', 'Th√¨n'], nghia: 'M√£o Th√¨n h·∫°i - T·ªïn h·∫°i √¢m th·∫ßm' },
    { chi: ['Th√¢n', 'H·ª£i'], nghia: 'Th√¢n H·ª£i h·∫°i - Ph√° h·ªßy quan h·ªá' },
    { chi: ['D·∫≠u', 'Tu·∫•t'], nghia: 'D·∫≠u Tu·∫•t h·∫°i - L√†m t·ªïn th∆∞∆°ng' }
  ];

  for (const hai of lucHais) {
    if ((hai.chi[0] === chi1 && hai.chi[1] === chi2) || (hai.chi[0] === chi2 && hai.chi[1] === chi1)) {
      allResults.push({
        type: 'l·ª•c h·∫°i',
        label: 'L·ª•c H·∫°i (ƒê·ªãa Chi H·∫°i)',
        icon: 'üí¢',
        color: 'text-red-500',
        desc: `${chi1} h·∫°i ${chi2}`,
        detail: hai.nghia
      });
    }
  }

  // T·ª± H√¨nh (t·ª± h√¨nh ph·∫°t)
  const tuHinhs = [
    { chi: ['Th√¨n', 'Th√¨n'], nghia: 'Th√¨n t·ª± h√¨nh - T·ª± l√†m kh√≥ m√¨nh' },
    { chi: ['Ng·ªç', 'Ng·ªç'], nghia: 'Ng·ªç t·ª± h√¨nh - T·ª± ph√° ho·∫°i' },
    { chi: ['D·∫≠u', 'D·∫≠u'], nghia: 'D·∫≠u t·ª± h√¨nh - T·ª± g√¢y r·∫Øc r·ªëi' },
    { chi: ['H·ª£i', 'H·ª£i'], nghia: 'H·ª£i t·ª± h√¨nh - T·ª± h·∫°i b·∫£n th√¢n' }
  ];

  for (const tuHinh of tuHinhs) {
    if (chi1 === chi2 && tuHinh.chi[0] === chi1) {
      allResults.push({
        type: 't·ª± h√¨nh',
        label: 'T·ª± H√¨nh',
        icon: 'üîÑ',
        color: 'text-orange-600',
        desc: `${chi1} g·∫∑p ${chi2} (t·ª± h√¨nh)`,
        detail: tuHinh.nghia
      });
    }
  }

  // T∆∞∆°ng H√¨nh (h√¨nh ph·∫°t)
  const tuongHinhs = [
    { chi: ['T√Ω', 'M√£o'], nghia: 'T√Ω M√£o h√¨nh - V√¥ l·ªÖ, m·∫•t k√≠nh tr·ªçng' },
    { chi: ['D·∫ßn', 'T·ªã', 'Th√¢n'], nghia: 'D·∫ßn T·ªã Th√¢n tam h√¨nh - H√¨nh ph·∫°t tam h·ª£p, c·ª±c k·ª≥ hung' },
    { chi: ['S·ª≠u', 'Tu·∫•t', 'M√πi'], nghia: 'S·ª≠u Tu·∫•t M√πi tam h√¨nh - H√¨nh ph·∫°t th·∫ø l·ª±c' }
  ];

  for (const hinh of tuongHinhs) {
    if (hinh.chi.includes(chi1) && hinh.chi.includes(chi2) && chi1 !== chi2) {
      allResults.push({
        type: 'h√¨nh',
        label: 'T∆∞∆°ng H√¨nh (H√¨nh Ph·∫°t)',
        icon: '‚ö°',
        color: 'text-orange-600',
        desc: `${chi1} h√¨nh ${chi2}`,
        detail: hinh.nghia
      });
    }
  }

  // Ph√° (T∆∞∆°ng Ph√°)
  const tuongPhas = [
    { chi: ['T√Ω', 'D·∫≠u'], nghia: 'T√Ω D·∫≠u ph√° - Ph√° ho·∫°i quan h·ªá' },
    { chi: ['S·ª≠u', 'Th√¨n'], nghia: 'S·ª≠u Th√¨n ph√° - Ph√° v·ª° c·ª•c di·ªán' },
    { chi: ['D·∫ßn', 'H·ª£i'], nghia: 'D·∫ßn H·ª£i ph√° - Ph√° tan k·∫ø ho·∫°ch' },
    { chi: ['M√£o', 'Ng·ªç'], nghia: 'M√£o Ng·ªç ph√° - Ph√° h·ªßy t√¨nh c·∫£m' },
    { chi: ['T·ªã', 'Th√¢n'], nghia: 'T·ªã Th√¢n ph√° - Ph√° b·ªè th·ªèa thu·∫≠n' },
    { chi: ['M√πi', 'Tu·∫•t'], nghia: 'M√πi Tu·∫•t ph√° - Ph√° v·ª° ƒë·ªìng minh' }
  ];

  for (const pha of tuongPhas) {
    if ((pha.chi[0] === chi1 && pha.chi[1] === chi2) || (pha.chi[0] === chi2 && pha.chi[1] === chi1)) {
      allResults.push({
        type: 'ph√°',
        label: 'T∆∞∆°ng Ph√° (ƒê·ªãa Chi Ph√°)',
        icon: 'üí•',
        color: 'text-red-400',
        desc: `${chi1} ph√° ${chi2}`,
        detail: pha.nghia
      });
    }
  }

  return allResults.length > 0 ? allResults : [{ type: 'b√¨nh th∆∞·ªùng', label: 'B√¨nh th∆∞·ªùng', icon: '‚Üî', color: 'text-gray-600', desc: 'Kh√¥ng c√≥ quan h·ªá ƒë·∫∑c bi·ªát', detail: 'Hai chi n√†y kh√¥ng c√≥ quan h·ªá ƒë·∫∑c bi·ªát n√†o ƒë√°ng ch√∫ √Ω' }];
};

export const FlashCardComparison = () => {
  const [card1, setCard1] = useState<Card | null>(null);
  const [card2, setCard2] = useState<Card | null>(null);
  const [card3, setCard3] = useState<Card | null>(null);
  const [selectingCard, setSelectingCard] = useState<1 | 2 | 3 | null>(null);

  const handleCardSelect = (card: Card) => {
    if (selectingCard === 1) {
      setCard1(card);
      setSelectingCard(null);
    } else if (selectingCard === 2) {
      setCard2(card);
      setSelectingCard(null);
    } else if (selectingCard === 3) {
      setCard3(card);
      setSelectingCard(null);
    }
  };

  const handleSwap = () => {
    const temp = card1;
    setCard1(card2);
    setCard2(temp);
  };

  const analyzeRelation = (c1: Card, c2: Card) => {
    const results = [];

    // Quan h·ªá Ng≈© H√†nh
    const nguHanhRelation = analyzeNguHanhRelation(c1.nguHanh, c2.nguHanh);
    results.push({
      category: 'Quan H·ªá Ng≈© H√†nh',
      pair: `${c1.name} ‚Üî ${c2.name}`,
      ...nguHanhRelation
    });

    // N·∫øu c·∫£ 2 ƒë·ªÅu l√† Thi√™n Can
    if (c1.type === 'thiencan' && c2.type === 'thiencan') {
      const canRelation = analyzeThienCanRelation(c1.name, c2.name);
      results.push({
        category: 'Quan H·ªá Thi√™n Can',
        pair: `${c1.name} ‚Üî ${c2.name}`,
        ...canRelation
      });
    }

    // N·∫øu c·∫£ 2 ƒë·ªÅu l√† ƒê·ªãa Chi - c√≥ th·ªÉ c√≥ nhi·ªÅu quan h·ªá
    if (c1.type === 'diachi' && c2.type === 'diachi') {
      const chiRelations = analyzeDiaChiRelation(c1.name, c2.name);
      // ƒê·ªãa Chi c√≥ th·ªÉ c√≥ nhi·ªÅu quan h·ªá c√πng l√∫c
      if (Array.isArray(chiRelations)) {
        chiRelations.forEach(rel => {
          results.push({
            category: 'Quan H·ªá ƒê·ªãa Chi',
            pair: `${c1.name} ‚Üî ${c2.name}`,
            ...rel
          });
        });
      }
    }

    return results;
  };

  const getAllRelations = () => {
    const allRelations = [];

    if (card1 && card2) {
      allRelations.push({
        title: 'Th·∫ª 1 ‚Üî Th·∫ª 2',
        relations: analyzeRelation(card1, card2)
      });
    }

    if (card1 && card3) {
      allRelations.push({
        title: 'Th·∫ª 1 ‚Üî Th·∫ª 3',
        relations: analyzeRelation(card1, card3)
      });
    }

    if (card2 && card3) {
      allRelations.push({
        title: 'Th·∫ª 2 ‚Üî Th·∫ª 3',
        relations: analyzeRelation(card2, card3)
      });
    }

    // Ki·ªÉm tra Tam H·ª£p ho√†n ch·ªânh khi c√≥ ƒë·ªß 3 ƒê·ªãa Chi
    if (card1 && card2 && card3 &&
        card1.type === 'diachi' && card2.type === 'diachi' && card3.type === 'diachi') {
      const tamHops = [
        { chi: ['Th√¢n', 'T√Ω', 'Th√¨n'], hoa: 'Th·ªßy', nghia: 'Th√¢n T√Ω Th√¨n tam h·ª£p Th·ªßy c·ª•c - Th√¥ng minh, linh ho·∫°t, kh√¥n kh√©o' },
        { chi: ['H·ª£i', 'M√£o', 'M√πi'], hoa: 'M·ªôc', nghia: 'H·ª£i M√£o M√πi tam h·ª£p M·ªôc c·ª•c - Nh√¢n t·ª´, ph√°t tri·ªÉn, s√°ng t·∫°o' },
        { chi: ['D·∫ßn', 'Ng·ªç', 'Tu·∫•t'], hoa: 'H·ªèa', nghia: 'D·∫ßn Ng·ªç Tu·∫•t tam h·ª£p H·ªèa c·ª•c - Nhi·ªát huy·∫øt, quy·ªÅn l·ª±c, h√†nh ƒë·ªông' },
        { chi: ['T·ªã', 'D·∫≠u', 'S·ª≠u'], hoa: 'Kim', nghia: 'T·ªã D·∫≠u S·ª≠u tam h·ª£p Kim c·ª•c - Quy·∫øt ƒëo√°n, c·ª©ng r·∫Øn, nghƒ©a kh√≠' }
      ];

      const threeChis = [card1.name, card2.name, card3.name].sort();

      for (const tamHop of tamHops) {
        const sortedTamHop = [...tamHop.chi].sort();
        if (JSON.stringify(threeChis) === JSON.stringify(sortedTamHop)) {
          allRelations.push({
            title: 'üéØ Tam H·ª£p Ho√†n Ch·ªânh (3 Th·∫ª)',
            relations: [{
              category: 'Tam H·ª£p ƒê·ªãa Chi',
              pair: `${card1.name} - ${card2.name} - ${card3.name}`,
              type: 'tam h·ª£p',
              label: `Tam H·ª£p ${tamHop.hoa} C·ª•c`,
              icon: '‚ú®',
              color: 'text-purple-600',
              desc: `${tamHop.chi.join(' - ')} h·ª£p h√≥a ${tamHop.hoa}`,
              detail: `${tamHop.nghia}. ƒê√¢y l√† c·ª•c h·ª£p m·∫°nh nh·∫•t, ba chi c√πng h∆∞·ªõng v·ªÅ m·ªôt m·ª•c ti√™u.`
            }]
          });
        }
      }

      // Ki·ªÉm tra Tam H√¨nh
      const tamHinhs = [
        { chi: ['D·∫ßn', 'T·ªã', 'Th√¢n'], nghia: 'D·∫ßn T·ªã Th√¢n tam h√¨nh - H√¨nh ph·∫°t c·ª±c hung, nhi·ªÅu tai h·ªça' },
        { chi: ['S·ª≠u', 'Tu·∫•t', 'M√πi'], nghia: 'S·ª≠u Tu·∫•t M√πi tam h√¨nh - H√¨nh ph·∫°t th·∫ø l·ª±c, quy·ªÅn l·ª±c ƒë·∫•u ƒë√°' }
      ];

      for (const tamHinh of tamHinhs) {
        const sortedTamHinh = [...tamHinh.chi].sort();
        if (JSON.stringify(threeChis) === JSON.stringify(sortedTamHinh)) {
          allRelations.push({
            title: '‚ö†Ô∏è Tam H√¨nh Ho√†n Ch·ªânh (3 Th·∫ª)',
            relations: [{
              category: 'Tam H√¨nh ƒê·ªãa Chi',
              pair: `${card1.name} - ${card2.name} - ${card3.name}`,
              type: 'tam h√¨nh',
              label: 'Tam H√¨nh (C·ª±c Hung)',
              icon: '‚õî',
              color: 'text-red-700',
              desc: `${tamHinh.chi.join(' - ')} tam h√¨nh`,
              detail: tamHinh.nghia
            }]
          });
        }
      }
    }

    return allRelations.length > 0 ? allRelations : null;
  };

  const allRelations = getAllRelations();

  return (
    <div className="w-full max-w-7xl mx-auto">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-12 text-center"
      >
        <h2 className="text-5xl font-black mb-4 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
          So S√°nh Quan H·ªá Flashcard
        </h2>
        <p className="text-gray-900 dark:text-gray-100 text-lg">
          Ch·ªçn 2-3 th·∫ª b·∫•t k·ª≥ ƒë·ªÉ xem m·ªëi quan h·ªá gi·ªØa ch√∫ng
        </p>
      </motion.div>

      {/* Khu v·ª±c ch·ªçn 3 th·∫ª */}
      <div className="grid md:grid-cols-3 gap-6 mb-8">
        {/* N√∫t ho√°n ƒë·ªïi gi·ªØa th·∫ª 1 v√† 2 */}
        {card1 && card2 && (
          <div className="md:col-span-3 flex justify-center -mb-4 relative z-10">
            <motion.button
              onClick={handleSwap}
              whileHover={{ scale: 1.1, rotate: 180 }}
              whileTap={{ scale: 0.9 }}
              className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white px-6 py-3 rounded-full font-bold shadow-lg hover:shadow-xl transition-all flex items-center gap-2"
            >
              <span className="text-xl">‚áÑ</span>
              Ho√°n ƒê·ªïi Th·∫ª 1 ‚Üî 2
            </motion.button>
          </div>
        )}
      </div>

      <div className="grid md:grid-cols-3 gap-6 mb-12">
        {/* Th·∫ª 1 */}
        <motion.div
          initial={{ opacity: 0, x: -50 }}
          animate={{ opacity: 1, x: 0 }}
          className="bg-white/80 backdrop-blur-sm rounded-3xl p-8 shadow-xl"
        >
          <h3 className="text-2xl font-black mb-4 text-center text-indigo-600">Th·∫ª 1</h3>
          {card1 ? (
            <div className={`${getNguHanhColor(card1.nguHanh).bg} rounded-2xl p-6 border-4 ${getNguHanhColor(card1.nguHanh).border}`}>
              <div className="text-center">
                <div className="text-4xl font-black mb-2">{card1.name}</div>
                <div className="text-sm font-semibold opacity-80">
                  {card1.type === 'nguhanh' && 'Ng≈© H√†nh'}
                  {card1.type === 'thiencan' && 'Thi√™n Can'}
                  {card1.type === 'diachi' && 'ƒê·ªãa Chi'}
                </div>
                <div className="text-sm font-bold mt-1">({card1.nguHanh})</div>
              </div>
              <button
                onClick={() => setCard1(null)}
                className="mt-4 w-full bg-white/30 hover:bg-white/50 py-2 rounded-lg font-bold transition-all"
              >
                X√≥a
              </button>
            </div>
          ) : (
            <button
              onClick={() => setSelectingCard(1)}
              className="w-full h-48 border-4 border-dashed border-gray-300 rounded-2xl hover:border-indigo-400 hover:bg-indigo-50/50 transition-all duration-300 flex items-center justify-center"
            >
              <div className="text-center">
                <div className="text-6xl mb-2">+</div>
                <div className="font-bold text-gray-900 dark:text-gray-100">Ch·ªçn Th·∫ª 1</div>
              </div>
            </button>
          )}
        </motion.div>

        {/* Th·∫ª 2 */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          className="bg-white/80 backdrop-blur-sm rounded-3xl p-8 shadow-xl"
        >
          <h3 className="text-2xl font-black mb-4 text-center text-purple-600">Th·∫ª 2</h3>
          {card2 ? (
            <div className={`${getNguHanhColor(card2.nguHanh).bg} rounded-2xl p-6 border-4 ${getNguHanhColor(card2.nguHanh).border}`}>
              <div className="text-center">
                <div className="text-4xl font-black mb-2">{card2.name}</div>
                <div className="text-sm font-semibold opacity-80">
                  {card2.type === 'nguhanh' && 'Ng≈© H√†nh'}
                  {card2.type === 'thiencan' && 'Thi√™n Can'}
                  {card2.type === 'diachi' && 'ƒê·ªãa Chi'}
                </div>
                <div className="text-sm font-bold mt-1">({card2.nguHanh})</div>
              </div>
              <button
                onClick={() => setCard2(null)}
                className="mt-4 w-full bg-white/30 hover:bg-white/50 py-2 rounded-lg font-bold transition-all"
              >
                X√≥a
              </button>
            </div>
          ) : (
            <button
              onClick={() => setSelectingCard(2)}
              className="w-full h-48 border-4 border-dashed border-gray-300 rounded-2xl hover:border-purple-400 hover:bg-purple-50/50 transition-all duration-300 flex items-center justify-center"
            >
              <div className="text-center">
                <div className="text-6xl mb-2">+</div>
                <div className="font-bold text-gray-900 dark:text-gray-100">Ch·ªçn Th·∫ª 2</div>
              </div>
            </button>
          )}
        </motion.div>

        {/* Th·∫ª 3 (Optional) */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.1 }}
          className="bg-white/80 backdrop-blur-sm rounded-3xl p-8 shadow-xl"
        >
          <h3 className="text-2xl font-black mb-4 text-center text-pink-600">Th·∫ª 3 (T√πy ch·ªçn)</h3>
          {card3 ? (
            <div className={`${getNguHanhColor(card3.nguHanh).bg} rounded-2xl p-6 border-4 ${getNguHanhColor(card3.nguHanh).border}`}>
              <div className="text-center">
                <div className="text-4xl font-black mb-2">{card3.name}</div>
                <div className="text-sm font-semibold opacity-80">
                  {card3.type === 'nguhanh' && 'Ng≈© H√†nh'}
                  {card3.type === 'thiencan' && 'Thi√™n Can'}
                  {card3.type === 'diachi' && 'ƒê·ªãa Chi'}
                </div>
                <div className="text-sm font-bold mt-1">({card3.nguHanh})</div>
              </div>
              <button
                onClick={() => setCard3(null)}
                className="mt-4 w-full bg-white/30 hover:bg-white/50 py-2 rounded-lg font-bold transition-all"
              >
                X√≥a
              </button>
            </div>
          ) : (
            <button
              onClick={() => setSelectingCard(3)}
              className="w-full h-48 border-4 border-dashed border-gray-300 rounded-2xl hover:border-pink-400 hover:bg-pink-50/50 transition-all duration-300 flex items-center justify-center"
            >
              <div className="text-center">
                <div className="text-6xl mb-2">+</div>
                <div className="font-bold text-gray-900 dark:text-gray-100">Ch·ªçn Th·∫ª 3</div>
              </div>
            </button>
          )}
        </motion.div>
      </div>

      {/* Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch */}
      <AnimatePresence>
        {allRelations && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="mb-12"
          >
            <div className="space-y-8">
              {allRelations.map((relationGroup, groupIndex) => (
                <div key={groupIndex} className="bg-gradient-to-br from-indigo-50 to-purple-50 rounded-3xl p-8 shadow-2xl border-2 border-indigo-200">
                  <h3 className="text-3xl font-black mb-6 text-center text-indigo-800 flex items-center justify-center gap-3">
                    <span>‚ö°</span>
                    {relationGroup.title}
                    <span>‚ö°</span>
                  </h3>

                  <div className="space-y-6">
                    {relationGroup.relations.map((rel: any, index: number) => (
                      <div key={index} className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-lg">
                        <div className="flex items-center justify-between mb-4">
                          <div>
                            <h4 className="text-xl font-black text-gray-900 dark:text-gray-100">{rel.category}</h4>
                            <div className="text-sm text-gray-900 dark:text-gray-100 font-semibold mt-1">{rel.pair}</div>
                          </div>
                          <span className={`text-4xl ${rel.color}`}>{rel.icon}</span>
                        </div>
                        <div className="space-y-2">
                          <div className="flex items-center gap-3">
                            <span className={`px-4 py-2 rounded-xl font-black text-lg ${rel.color} bg-white shadow-md`}>
                              {rel.label}
                            </span>
                          </div>
                          <div className="text-gray-900 dark:text-gray-100 font-semibold">{rel.desc}</div>
                          {rel.detail && (
                            <div className="text-sm text-gray-900 dark:text-gray-100 italic bg-gray-50 dark:bg-gray-800 p-3 rounded-lg">
                              üí° {rel.detail}
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal ch·ªçn th·∫ª */}
      <AnimatePresence>
        {selectingCard && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
            onClick={() => setSelectingCard(null)}
          >
            <motion.div
              initial={{ scale: 0.9, y: 20 }}
              animate={{ scale: 1, y: 0 }}
              exit={{ scale: 0.9, y: 20 }}
              className="bg-white rounded-3xl p-8 max-w-6xl w-full max-h-[80vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-3xl font-black text-gray-800">
                  Ch·ªçn Th·∫ª {selectingCard}
                </h3>
                <button
                  onClick={() => setSelectingCard(null)}
                  className="w-10 h-10 rounded-full bg-gray-200 hover:bg-gray-300 flex items-center justify-center font-bold text-xl"
                >
                  √ó
                </button>
              </div>

              {/* Ng≈© H√†nh */}
              <div className="mb-8">
                <h4 className="text-xl font-black mb-4 text-orange-600">Ng≈© H√†nh</h4>
                <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                  {nguHanhData.map((nh) => {
                    const card = { type: 'nguhanh' as CardType, name: nh.ten, nguHanh: nh.loai, data: nh };
                    const colors = getNguHanhColor(nh.loai);
                    return (
                      <button
                        key={nh.ten}
                        onClick={() => handleCardSelect(card)}
                        className={`${colors.bg} p-4 rounded-xl border-2 ${colors.border} hover:scale-105 transition-all duration-200 shadow-lg`}
                      >
                        <div className="text-2xl font-black">{nh.ten}</div>
                        <div className="text-xs font-semibold opacity-80">Ng≈© H√†nh</div>
                      </button>
                    );
                  })}
                </div>
              </div>

              {/* Thi√™n Can */}
              <div className="mb-8">
                <h4 className="text-xl font-black mb-4 text-indigo-600">Thi√™n Can</h4>
                <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                  {thienCanData.map((tc) => {
                    const card = { type: 'thiencan' as CardType, name: tc.ten, nguHanh: tc.nguHanh, data: tc };
                    const colors = getNguHanhColor(tc.nguHanh);
                    return (
                      <button
                        key={tc.ten}
                        onClick={() => handleCardSelect(card)}
                        className={`${colors.bg} p-4 rounded-xl border-2 ${colors.border} hover:scale-105 transition-all duration-200 shadow-lg`}
                      >
                        <div className="text-2xl font-black">{tc.ten}</div>
                        <div className="text-xs font-semibold opacity-80">Thi√™n Can</div>
                      </button>
                    );
                  })}
                </div>
              </div>

              {/* ƒê·ªãa Chi */}
              <div className="mb-4">
                <h4 className="text-xl font-black mb-4 text-purple-600">ƒê·ªãa Chi</h4>
                <div className="grid grid-cols-2 md:grid-cols-6 gap-4">
                  {diaChiData.map((dc) => {
                    const card = { type: 'diachi' as CardType, name: dc.ten, nguHanh: dc.nguHanh, data: dc };
                    const colors = getNguHanhColor(dc.nguHanh);
                    return (
                      <button
                        key={dc.ten}
                        onClick={() => handleCardSelect(card)}
                        className={`${colors.bg} p-4 rounded-xl border-2 ${colors.border} hover:scale-105 transition-all duration-200 shadow-lg`}
                      >
                        <div className="text-2xl font-black">{dc.ten}</div>
                        <div className="text-xs font-semibold opacity-80">ƒê·ªãa Chi</div>
                      </button>
                    );
                  })}
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Ch√∫ th√≠ch */}
      <div className="mt-8 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl p-6 border-2 border-indigo-200">
        <h4 className="font-black text-lg mb-4 text-gray-900 dark:text-gray-100 flex items-center gap-2">
          <span>üí°</span> H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
        </h4>
        <div className="space-y-2 text-sm text-gray-900 dark:text-gray-100">
          <p><span className="font-bold">‚Ä¢ B∆∞·ªõc 1:</span> Click v√†o √¥ "Ch·ªçn Th·∫ª 1" v√† ch·ªçn m·ªôt th·∫ª b·∫•t k·ª≥ (Ng≈© H√†nh, Thi√™n Can, ho·∫∑c ƒê·ªãa Chi)</p>
          <p><span className="font-bold">‚Ä¢ B∆∞·ªõc 2:</span> Click v√†o √¥ "Ch·ªçn Th·∫ª 2" v√† ch·ªçn th·∫ª th·ª© hai</p>
          <p><span className="font-bold">‚Ä¢ B∆∞·ªõc 3:</span> (T√πy ch·ªçn) Click v√†o √¥ "Ch·ªçn Th·∫ª 3" ƒë·ªÉ so s√°nh th√™m th·∫ª th·ª© ba</p>
          <p><span className="font-bold">‚Ä¢ Ho√°n ƒë·ªïi:</span> Click n√∫t "Ho√°n ƒê·ªïi" ƒë·ªÉ ƒë·ªïi v·ªã tr√≠ Th·∫ª 1 v√† Th·∫ª 2</p>
          <p><span className="font-bold">‚Ä¢ K·∫øt qu·∫£:</span> Xem ph√¢n t√≠ch quan h·ªá gi·ªØa t·∫•t c·∫£ c√°c c·∫∑p th·∫ª (1‚Üî2, 1‚Üî3, 2‚Üî3)</p>
          <p className="mt-4 font-bold text-blue-700">Quan h·ªá Ng≈© H√†nh:</p>
          <p><span className="font-bold text-green-600">‚Ä¢ T∆∞∆°ng Sinh ‚Üí:</span> H·ªó tr·ª£, nu√¥i d∆∞·ª°ng l·∫´n nhau</p>
          <p><span className="font-bold text-red-600">‚Ä¢ T∆∞∆°ng Kh·∫Øc ‚öî:</span> Ki·ªÉm so√°t, ch·∫ø ng·ª±</p>

          <p className="mt-4 font-bold text-indigo-700">Quan h·ªá Thi√™n Can:</p>
          <p><span className="font-bold text-green-600">‚Ä¢ H·ª£p ü§ù:</span> Gi√°p-K·ª∑, ·∫§t-Canh, B√≠nh-T√¢n, ƒêinh-Nh√¢m, M·∫≠u-Qu√Ω</p>
          <p><span className="font-bold text-red-600">‚Ä¢ Xung ‚öîÔ∏è:</span> Xung ƒë·ªôt, ƒë·ªëi l·∫≠p</p>

          <p className="mt-4 font-bold text-purple-700">Quan h·ªá ƒê·ªãa Chi (ph·ª©c t·∫°p h∆°n):</p>
          <p><span className="font-bold text-green-600">‚Ä¢ L·ª•c H·ª£p ü§ù:</span> 6 c·∫∑p h·ª£p 2 chi (T√Ω-S·ª≠u, D·∫ßn-H·ª£i...)</p>
          <p><span className="font-bold text-purple-600">‚Ä¢ Tam H·ª£p ‚ú®:</span> 3 chi h·ª£p c·ª•c (Th√¢n-T√Ω-Th√¨n, H·ª£i-M√£o-M√πi...)</p>
          <p><span className="font-bold text-blue-600">‚Ä¢ B√°n H·ª£p üîó:</span> 2 chi c√≥ th·ªÉ tam h·ª£p (thi·∫øu 1 chi)</p>
          <p><span className="font-bold text-red-600">‚Ä¢ L·ª•c Xung ‚öîÔ∏è:</span> 6 c·∫∑p xung ƒë·ªëi l·∫≠p (T√Ω-Ng·ªç, M√£o-D·∫≠u...)</p>
          <p><span className="font-bold text-orange-600">‚Ä¢ T∆∞∆°ng H√¨nh ‚ö°:</span> H√¨nh ph·∫°t (T√Ω-M√£o, D·∫ßn-T·ªã-Th√¢n...)</p>
          <p><span className="font-bold text-red-500">‚Ä¢ L·ª•c H·∫°i üí¢:</span> 6 c·∫∑p h·∫°i √¢m th·∫ßm (T√Ω-M√πi, S·ª≠u-Ng·ªç...)</p>
          <p><span className="font-bold text-red-400">‚Ä¢ T∆∞∆°ng Ph√° üí•:</span> Ph√° ho·∫°i quan h·ªá (T√Ω-D·∫≠u, M√£o-Ng·ªç...)</p>
          <p><span className="font-bold text-orange-600">‚Ä¢ T·ª± H√¨nh üîÑ:</span> Th√¨n-Th√¨n, Ng·ªç-Ng·ªç, D·∫≠u-D·∫≠u, H·ª£i-H·ª£i</p>

          <p className="mt-4 text-xs italic text-gray-900 dark:text-gray-100">üí° L∆∞u √Ω: ƒê·ªãa Chi c√≥ th·ªÉ c√≥ NHI·ªÄU quan h·ªá c√πng l√∫c (VD: T·ªã-Th√¢n v·ª´a L·ª•c H·ª£p, v·ª´a T∆∞∆°ng Ph√°)</p>
        </div>
      </div>
    </div>
  );
};
