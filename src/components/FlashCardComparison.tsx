import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import type { NguHanhType } from '../types';
import { getNguHanhColor } from '../utils/colors';
import { nguHanhData } from '../data/nguHanh';
import { thienCanData } from '../data/thienCan';
import { diaChiData } from '../data/diaChi';

type CardType = 'nguhanh' | 'thiencan' | 'diachi';

interface Card {
  type: CardType;
  name: string;
  nguHanh: NguHanhType;
  data?: any;
}

// H√†m ph√¢n t√≠ch quan h·ªá gi·ªØa 2 Ng≈© H√†nh
const analyzeNguHanhRelation = (nh1: NguHanhType, nh2: NguHanhType) => {
  const relations: Record<NguHanhType, Record<string, NguHanhType[]>> = {
    Kim: {
      sinh: ['Th·ªßy'],
      kh·∫Øc: ['M·ªôc'],
      b·ªãSinh: ['Th·ªï'],
      b·ªãKh·∫Øc: ['H·ªèa'],
      ƒë·ªìng: ['Kim']
    },
    M·ªôc: {
      sinh: ['H·ªèa'],
      kh·∫Øc: ['Th·ªï'],
      b·ªãSinh: ['Th·ªßy'],
      b·ªãKh·∫Øc: ['Kim'],
      ƒë·ªìng: ['M·ªôc']
    },
    Th·ªßy: {
      sinh: ['M·ªôc'],
      kh·∫Øc: ['H·ªèa'],
      b·ªãSinh: ['Kim'],
      b·ªãKh·∫Øc: ['Th·ªï'],
      ƒë·ªìng: ['Th·ªßy']
    },
    H·ªèa: {
      sinh: ['Th·ªï'],
      kh·∫Øc: ['Kim'],
      b·ªãSinh: ['M·ªôc'],
      b·ªãKh·∫Øc: ['Th·ªßy'],
      ƒë·ªìng: ['H·ªèa']
    },
    Th·ªï: {
      sinh: ['Kim'],
      kh·∫Øc: ['Th·ªßy'],
      b·ªãSinh: ['H·ªèa'],
      b·ªãKh·∫Øc: ['M·ªôc'],
      ƒë·ªìng: ['Th·ªï']
    }
  };

  if (relations[nh1].sinh.includes(nh2)) {
    return { type: 'sinh', label: 'T∆∞∆°ng Sinh', icon: '‚Üí', color: 'text-green-600', desc: `${nh1} sinh ${nh2}`, detail: 'H·ªó tr·ª£, nu√¥i d∆∞·ª°ng, t·∫°o ƒëi·ªÅu ki·ªán ph√°t tri·ªÉn' };
  }
  if (relations[nh1].kh·∫Øc.includes(nh2)) {
    return { type: 'kh·∫Øc', label: 'T∆∞∆°ng Kh·∫Øc', icon: '‚öî', color: 'text-red-600', desc: `${nh1} kh·∫Øc ${nh2}`, detail: 'Ki·ªÉm so√°t, ch·∫ø ng·ª±, √°p ch·∫ø' };
  }
  if (relations[nh1].b·ªãSinh.includes(nh2)) {
    return { type: 'b·ªãsinh', label: 'ƒê∆∞·ª£c Sinh', icon: '‚Üê', color: 'text-blue-600', desc: `${nh1} ƒë∆∞·ª£c ${nh2} sinh`, detail: 'Nh·∫≠n h·ªó tr·ª£, ƒë∆∞·ª£c nu√¥i d∆∞·ª°ng' };
  }
  if (relations[nh1].b·ªãKh·∫Øc.includes(nh2)) {
    return { type: 'b·ªãkh·∫Øc', label: 'B·ªã Kh·∫Øc', icon: '‚ö°', color: 'text-orange-600', desc: `${nh1} b·ªã ${nh2} kh·∫Øc`, detail: 'B·ªã ki·ªÉm so√°t, b·ªã ch·∫ø ng·ª±' };
  }
  if (relations[nh1].ƒë·ªìng.includes(nh2)) {
    return { type: 'ƒë·ªìng', label: 'ƒê·ªìng H√†nh', icon: '=', color: 'text-purple-600', desc: `${nh1} ƒë·ªìng v·ªõi ${nh2}`, detail: 'C√πng lo·∫°i, h·ªó tr·ª£ l·∫´n nhau' };
  }

  return { type: 'none', label: 'Kh√¥ng c√≥', icon: '?', color: 'text-gray-600', desc: 'Kh√¥ng c√≥ quan h·ªá r√µ r√†ng', detail: '' };
};

// H√†m ph√¢n t√≠ch quan h·ªá Thi√™n Can
const analyzeThienCanRelation = (can1: string, can2: string) => {
  // H·ª£p
  const hops = [
    ['Gi√°p', 'K·ª∑'],
    ['·∫§t', 'Canh'],
    ['B√≠nh', 'T√¢n'],
    ['ƒêinh', 'Nh√¢m'],
    ['M·∫≠u', 'Qu√Ω']
  ];

  for (const hop of hops) {
    if ((hop[0] === can1 && hop[1] === can2) || (hop[0] === can2 && hop[1] === can1)) {
      return { type: 'h·ª£p', label: 'Thi√™n Can H·ª£p', icon: 'ü§ù', color: 'text-green-600', desc: `${can1} h·ª£p ${can2}`, detail: 'H√≤a h·ª£p, h·ªó tr·ª£, l√†m vi·ªác t·ªët c√πng nhau' };
    }
  }

  // Xung (ƒë·ªëi di·ªán nhau)
  const xungs = [
    ['Gi√°p', 'Canh'],
    ['·∫§t', 'T√¢n'],
    ['B√≠nh', 'Nh√¢m'],
    ['ƒêinh', 'Qu√Ω'],
    ['M·∫≠u', 'Gi√°p'],
    ['K·ª∑', '·∫§t']
  ];

  for (const xung of xungs) {
    if ((xung[0] === can1 && xung[1] === can2) || (xung[0] === can2 && xung[1] === can1)) {
      return { type: 'xung', label: 'Thi√™n Can Xung', icon: '‚öîÔ∏è', color: 'text-red-600', desc: `${can1} xung ${can2}`, detail: 'Xung ƒë·ªôt, ƒë·ªëi l·∫≠p, kh√≥ h·ª£p t√°c' };
    }
  }

  return { type: 'b√¨nh th∆∞·ªùng', label: 'B√¨nh th∆∞·ªùng', icon: '‚Üî', color: 'text-gray-600', desc: 'Kh√¥ng c√≥ quan h·ªá ƒë·∫∑c bi·ªát', detail: '' };
};

// H√†m ph√¢n t√≠ch quan h·ªá ƒê·ªãa Chi
const analyzeDiaChiRelation = (chi1: string, chi2: string) => {
  // H·ª£p
  const hops = [
    ['T√Ω', 'S·ª≠u'],
    ['D·∫ßn', 'H·ª£i'],
    ['M√£o', 'Tu·∫•t'],
    ['Th√¨n', 'D·∫≠u'],
    ['T·ªã', 'Th√¢n'],
    ['Ng·ªç', 'M√πi']
  ];

  for (const hop of hops) {
    if ((hop[0] === chi1 && hop[1] === chi2) || (hop[0] === chi2 && hop[1] === chi1)) {
      return { type: 'h·ª£p', label: 'ƒê·ªãa Chi H·ª£p', icon: 'ü§ù', color: 'text-green-600', desc: `${chi1} h·ª£p ${chi2}`, detail: 'H√≤a h·ª£p, h·ªó tr·ª£, t·ªët ƒë·∫πp' };
    }
  }

  // Xung
  const xungs = [
    ['T√Ω', 'Ng·ªç'],
    ['S·ª≠u', 'M√πi'],
    ['D·∫ßn', 'Th√¢n'],
    ['M√£o', 'D·∫≠u'],
    ['Th√¨n', 'Tu·∫•t'],
    ['T·ªã', 'H·ª£i']
  ];

  for (const xung of xungs) {
    if ((xung[0] === chi1 && xung[1] === chi2) || (xung[0] === chi2 && xung[1] === chi1)) {
      return { type: 'xung', label: 'ƒê·ªãa Chi Xung', icon: '‚öîÔ∏è', color: 'text-red-600', desc: `${chi1} xung ${chi2}`, detail: 'Xung ƒë·ªôt m·∫°nh, ƒë·ªëi l·∫≠p tr·ª±c di·ªán' };
    }
  }

  // H√¨nh
  const hinhs = [
    ['T√Ω', 'M√£o'],
    ['D·∫ßn', 'T·ªã', 'Th√¢n'],
    ['S·ª≠u', 'Tu·∫•t', 'M√πi'],
    ['Th√¨n', 'Th√¨n'],
    ['Ng·ªç', 'Ng·ªç'],
    ['D·∫≠u', 'D·∫≠u'],
    ['H·ª£i', 'H·ª£i']
  ];

  for (const hinh of hinhs) {
    if (hinh.includes(chi1) && hinh.includes(chi2) && chi1 !== chi2) {
      return { type: 'h√¨nh', label: 'ƒê·ªãa Chi H√¨nh', icon: '‚ö°', color: 'text-orange-600', desc: `${chi1} h√¨nh ${chi2}`, detail: 'H√¨nh ph·∫°t, cƒÉng th·∫≥ng, b·∫•t l·ª£i' };
    }
  }

  // H·∫°i
  const hais = [
    ['T√Ω', 'M√πi'],
    ['S·ª≠u', 'Ng·ªç'],
    ['D·∫ßn', 'T·ªã'],
    ['M√£o', 'Th√¨n'],
    ['Th√¢n', 'H·ª£i'],
    ['D·∫≠u', 'Tu·∫•t']
  ];

  for (const hai of hais) {
    if ((hai[0] === chi1 && hai[1] === chi2) || (hai[0] === chi2 && hai[1] === chi1)) {
      return { type: 'h·∫°i', label: 'ƒê·ªãa Chi H·∫°i', icon: 'üí¢', color: 'text-red-500', desc: `${chi1} h·∫°i ${chi2}`, detail: 'H·∫°i, ph√° ho·∫°i √¢m th·∫ßm' };
    }
  }

  return { type: 'b√¨nh th∆∞·ªùng', label: 'B√¨nh th∆∞·ªùng', icon: '‚Üî', color: 'text-gray-600', desc: 'Kh√¥ng c√≥ quan h·ªá ƒë·∫∑c bi·ªát', detail: '' };
};

export const FlashCardComparison = () => {
  const [card1, setCard1] = useState<Card | null>(null);
  const [card2, setCard2] = useState<Card | null>(null);
  const [selectingCard, setSelectingCard] = useState<1 | 2 | null>(null);

  const handleCardSelect = (card: Card) => {
    if (selectingCard === 1) {
      setCard1(card);
      setSelectingCard(null);
    } else if (selectingCard === 2) {
      setCard2(card);
      setSelectingCard(null);
    }
  };

  const analyzeRelation = () => {
    if (!card1 || !card2) return null;

    const results = [];

    // Quan h·ªá Ng≈© H√†nh
    const nguHanhRelation = analyzeNguHanhRelation(card1.nguHanh, card2.nguHanh);
    results.push({
      category: 'Quan H·ªá Ng≈© H√†nh',
      ...nguHanhRelation
    });

    // N·∫øu c·∫£ 2 ƒë·ªÅu l√† Thi√™n Can
    if (card1.type === 'thiencan' && card2.type === 'thiencan') {
      const canRelation = analyzeThienCanRelation(card1.name, card2.name);
      results.push({
        category: 'Quan H·ªá Thi√™n Can',
        ...canRelation
      });
    }

    // N·∫øu c·∫£ 2 ƒë·ªÅu l√† ƒê·ªãa Chi
    if (card1.type === 'diachi' && card2.type === 'diachi') {
      const chiRelation = analyzeDiaChiRelation(card1.name, card2.name);
      results.push({
        category: 'Quan H·ªá ƒê·ªãa Chi',
        ...chiRelation
      });
    }

    return results;
  };

  const relation = analyzeRelation();

  return (
    <div className="w-full max-w-7xl mx-auto">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-12 text-center"
      >
        <h2 className="text-5xl font-black mb-4 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
          So S√°nh Quan H·ªá Flashcard
        </h2>
        <p className="text-gray-600 text-lg">
          Ch·ªçn 2 th·∫ª b·∫•t k·ª≥ ƒë·ªÉ xem m·ªëi quan h·ªá gi·ªØa ch√∫ng
        </p>
      </motion.div>

      {/* Khu v·ª±c ch·ªçn 2 th·∫ª */}
      <div className="grid md:grid-cols-2 gap-8 mb-12">
        {/* Th·∫ª 1 */}
        <motion.div
          initial={{ opacity: 0, x: -50 }}
          animate={{ opacity: 1, x: 0 }}
          className="bg-white/80 backdrop-blur-sm rounded-3xl p-8 shadow-xl"
        >
          <h3 className="text-2xl font-black mb-4 text-center text-indigo-600">Th·∫ª 1</h3>
          {card1 ? (
            <div className={`${getNguHanhColor(card1.nguHanh).bg} rounded-2xl p-6 border-4 ${getNguHanhColor(card1.nguHanh).border}`}>
              <div className="text-center">
                <div className="text-4xl font-black mb-2">{card1.name}</div>
                <div className="text-sm font-semibold opacity-80">
                  {card1.type === 'nguhanh' && 'Ng≈© H√†nh'}
                  {card1.type === 'thiencan' && 'Thi√™n Can'}
                  {card1.type === 'diachi' && 'ƒê·ªãa Chi'}
                </div>
                <div className="text-sm font-bold mt-1">({card1.nguHanh})</div>
              </div>
              <button
                onClick={() => setCard1(null)}
                className="mt-4 w-full bg-white/30 hover:bg-white/50 py-2 rounded-lg font-bold transition-all"
              >
                X√≥a
              </button>
            </div>
          ) : (
            <button
              onClick={() => setSelectingCard(1)}
              className="w-full h-48 border-4 border-dashed border-gray-300 rounded-2xl hover:border-indigo-400 hover:bg-indigo-50/50 transition-all duration-300 flex items-center justify-center"
            >
              <div className="text-center">
                <div className="text-6xl mb-2">+</div>
                <div className="font-bold text-gray-600">Ch·ªçn Th·∫ª 1</div>
              </div>
            </button>
          )}
        </motion.div>

        {/* Th·∫ª 2 */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          className="bg-white/80 backdrop-blur-sm rounded-3xl p-8 shadow-xl"
        >
          <h3 className="text-2xl font-black mb-4 text-center text-purple-600">Th·∫ª 2</h3>
          {card2 ? (
            <div className={`${getNguHanhColor(card2.nguHanh).bg} rounded-2xl p-6 border-4 ${getNguHanhColor(card2.nguHanh).border}`}>
              <div className="text-center">
                <div className="text-4xl font-black mb-2">{card2.name}</div>
                <div className="text-sm font-semibold opacity-80">
                  {card2.type === 'nguhanh' && 'Ng≈© H√†nh'}
                  {card2.type === 'thiencan' && 'Thi√™n Can'}
                  {card2.type === 'diachi' && 'ƒê·ªãa Chi'}
                </div>
                <div className="text-sm font-bold mt-1">({card2.nguHanh})</div>
              </div>
              <button
                onClick={() => setCard2(null)}
                className="mt-4 w-full bg-white/30 hover:bg-white/50 py-2 rounded-lg font-bold transition-all"
              >
                X√≥a
              </button>
            </div>
          ) : (
            <button
              onClick={() => setSelectingCard(2)}
              className="w-full h-48 border-4 border-dashed border-gray-300 rounded-2xl hover:border-purple-400 hover:bg-purple-50/50 transition-all duration-300 flex items-center justify-center"
            >
              <div className="text-center">
                <div className="text-6xl mb-2">+</div>
                <div className="font-bold text-gray-600">Ch·ªçn Th·∫ª 2</div>
              </div>
            </button>
          )}
        </motion.div>
      </div>

      {/* Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch */}
      <AnimatePresence>
        {relation && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="mb-12"
          >
            <div className="bg-gradient-to-br from-indigo-50 to-purple-50 rounded-3xl p-8 shadow-2xl border-2 border-indigo-200">
              <h3 className="text-3xl font-black mb-6 text-center text-indigo-800 flex items-center justify-center gap-3">
                <span>‚ö°</span>
                K·∫øt Qu·∫£ Ph√¢n T√≠ch Quan H·ªá
                <span>‚ö°</span>
              </h3>

              <div className="space-y-6">
                {relation.map((rel, index) => (
                  <div key={index} className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-lg">
                    <div className="flex items-center justify-between mb-4">
                      <h4 className="text-xl font-black text-gray-800">{rel.category}</h4>
                      <span className={`text-4xl ${rel.color}`}>{rel.icon}</span>
                    </div>
                    <div className="space-y-2">
                      <div className="flex items-center gap-3">
                        <span className={`px-4 py-2 rounded-xl font-black text-lg ${rel.color} bg-white shadow-md`}>
                          {rel.label}
                        </span>
                      </div>
                      <div className="text-gray-700 font-semibold">{rel.desc}</div>
                      {rel.detail && (
                        <div className="text-sm text-gray-600 italic bg-gray-50 p-3 rounded-lg">
                          üí° {rel.detail}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal ch·ªçn th·∫ª */}
      <AnimatePresence>
        {selectingCard && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
            onClick={() => setSelectingCard(null)}
          >
            <motion.div
              initial={{ scale: 0.9, y: 20 }}
              animate={{ scale: 1, y: 0 }}
              exit={{ scale: 0.9, y: 20 }}
              className="bg-white rounded-3xl p-8 max-w-6xl w-full max-h-[80vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-3xl font-black text-gray-800">
                  Ch·ªçn Th·∫ª {selectingCard}
                </h3>
                <button
                  onClick={() => setSelectingCard(null)}
                  className="w-10 h-10 rounded-full bg-gray-200 hover:bg-gray-300 flex items-center justify-center font-bold text-xl"
                >
                  √ó
                </button>
              </div>

              {/* Ng≈© H√†nh */}
              <div className="mb-8">
                <h4 className="text-xl font-black mb-4 text-orange-600">Ng≈© H√†nh</h4>
                <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                  {nguHanhData.map((nh) => {
                    const card = { type: 'nguhanh' as CardType, name: nh.ten, nguHanh: nh.loai, data: nh };
                    const colors = getNguHanhColor(nh.loai);
                    return (
                      <button
                        key={nh.ten}
                        onClick={() => handleCardSelect(card)}
                        className={`${colors.bg} p-4 rounded-xl border-2 ${colors.border} hover:scale-105 transition-all duration-200 shadow-lg`}
                      >
                        <div className="text-2xl font-black">{nh.ten}</div>
                        <div className="text-xs font-semibold opacity-80">Ng≈© H√†nh</div>
                      </button>
                    );
                  })}
                </div>
              </div>

              {/* Thi√™n Can */}
              <div className="mb-8">
                <h4 className="text-xl font-black mb-4 text-indigo-600">Thi√™n Can</h4>
                <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                  {thienCanData.map((tc) => {
                    const card = { type: 'thiencan' as CardType, name: tc.ten, nguHanh: tc.nguHanh, data: tc };
                    const colors = getNguHanhColor(tc.nguHanh);
                    return (
                      <button
                        key={tc.ten}
                        onClick={() => handleCardSelect(card)}
                        className={`${colors.bg} p-4 rounded-xl border-2 ${colors.border} hover:scale-105 transition-all duration-200 shadow-lg`}
                      >
                        <div className="text-2xl font-black">{tc.ten}</div>
                        <div className="text-xs font-semibold opacity-80">Thi√™n Can</div>
                      </button>
                    );
                  })}
                </div>
              </div>

              {/* ƒê·ªãa Chi */}
              <div className="mb-4">
                <h4 className="text-xl font-black mb-4 text-purple-600">ƒê·ªãa Chi</h4>
                <div className="grid grid-cols-2 md:grid-cols-6 gap-4">
                  {diaChiData.map((dc) => {
                    const card = { type: 'diachi' as CardType, name: dc.ten, nguHanh: dc.nguHanh, data: dc };
                    const colors = getNguHanhColor(dc.nguHanh);
                    return (
                      <button
                        key={dc.ten}
                        onClick={() => handleCardSelect(card)}
                        className={`${colors.bg} p-4 rounded-xl border-2 ${colors.border} hover:scale-105 transition-all duration-200 shadow-lg`}
                      >
                        <div className="text-2xl font-black">{dc.ten}</div>
                        <div className="text-xs font-semibold opacity-80">ƒê·ªãa Chi</div>
                      </button>
                    );
                  })}
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Ch√∫ th√≠ch */}
      <div className="mt-8 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl p-6 border-2 border-indigo-200">
        <h4 className="font-black text-lg mb-4 text-gray-800 flex items-center gap-2">
          <span>üí°</span> H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
        </h4>
        <div className="space-y-2 text-sm text-gray-700">
          <p><span className="font-bold">‚Ä¢ B∆∞·ªõc 1:</span> Click v√†o √¥ "Ch·ªçn Th·∫ª 1" v√† ch·ªçn m·ªôt th·∫ª b·∫•t k·ª≥ (Ng≈© H√†nh, Thi√™n Can, ho·∫∑c ƒê·ªãa Chi)</p>
          <p><span className="font-bold">‚Ä¢ B∆∞·ªõc 2:</span> Click v√†o √¥ "Ch·ªçn Th·∫ª 2" v√† ch·ªçn th·∫ª th·ª© hai</p>
          <p><span className="font-bold">‚Ä¢ B∆∞·ªõc 3:</span> Xem k·∫øt qu·∫£ ph√¢n t√≠ch quan h·ªá gi·ªØa 2 th·∫ª</p>
          <p className="mt-4 font-bold">C√°c lo·∫°i quan h·ªá:</p>
          <p><span className="font-bold text-green-600">‚Ä¢ T∆∞∆°ng Sinh:</span> H·ªó tr·ª£, nu√¥i d∆∞·ª°ng l·∫´n nhau</p>
          <p><span className="font-bold text-red-600">‚Ä¢ T∆∞∆°ng Kh·∫Øc:</span> Ki·ªÉm so√°t, ch·∫ø ng·ª±</p>
          <p><span className="font-bold text-green-600">‚Ä¢ H·ª£p:</span> H√≤a h·ª£p, h·ªó tr·ª£ t·ªët</p>
          <p><span className="font-bold text-red-600">‚Ä¢ Xung:</span> Xung ƒë·ªôt, ƒë·ªëi l·∫≠p</p>
          <p><span className="font-bold text-orange-600">‚Ä¢ H√¨nh:</span> H√¨nh ph·∫°t, cƒÉng th·∫≥ng</p>
          <p><span className="font-bold text-red-500">‚Ä¢ H·∫°i:</span> Ph√° ho·∫°i √¢m th·∫ßm</p>
        </div>
      </div>
    </div>
  );
};
